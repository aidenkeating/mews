// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package imageprocessing

import (
	"image"
	"sync"
)

var (
	lockImageActionMockTransform sync.RWMutex
)

// Ensure, that ImageActionMock does implement ImageAction.
// If this is not the case, regenerate this file with moq.
var _ ImageAction = &ImageActionMock{}

// ImageActionMock is a mock implementation of ImageAction.
//
//     func TestSomethingThatUsesImageAction(t *testing.T) {
//
//         // make and configure a mocked ImageAction
//         mockedImageAction := &ImageActionMock{
//             TransformFunc: func(in1 image.Image) (image.Image, error) {
// 	               panic("mock out the Transform method")
//             },
//         }
//
//         // use mockedImageAction in code that requires ImageAction
//         // and then make assertions.
//
//     }
type ImageActionMock struct {
	// TransformFunc mocks the Transform method.
	TransformFunc func(in1 image.Image) (image.Image, error)

	// calls tracks calls to the methods.
	calls struct {
		// Transform holds details about calls to the Transform method.
		Transform []struct {
			// In1 is the in1 argument value.
			In1 image.Image
		}
	}
}

// Transform calls TransformFunc.
func (mock *ImageActionMock) Transform(in1 image.Image) (image.Image, error) {
	if mock.TransformFunc == nil {
		panic("ImageActionMock.TransformFunc: method is nil but ImageAction.Transform was just called")
	}
	callInfo := struct {
		In1 image.Image
	}{
		In1: in1,
	}
	lockImageActionMockTransform.Lock()
	mock.calls.Transform = append(mock.calls.Transform, callInfo)
	lockImageActionMockTransform.Unlock()
	return mock.TransformFunc(in1)
}

// TransformCalls gets all the calls that were made to Transform.
// Check the length with:
//     len(mockedImageAction.TransformCalls())
func (mock *ImageActionMock) TransformCalls() []struct {
	In1 image.Image
} {
	var calls []struct {
		In1 image.Image
	}
	lockImageActionMockTransform.RLock()
	calls = mock.calls.Transform
	lockImageActionMockTransform.RUnlock()
	return calls
}
